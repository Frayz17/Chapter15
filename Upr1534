import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.BorderPane;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.stage.Stage;
import javafx.scene.shape.Line;
import java.util.*;
import javafx.scene.control.Button;

public class Upr1534 extends Application {
	@Override
	public void start(Stage primaryStage) {
		// Create borderPane for other panes
		BorderPane borderPane = new BorderPane();
		borderPane.setPadding(new Insets(10, 10, 10, 10));
		
		// Create a pane for lattice
		Pane pane = new Pane();
		
		// Create hBox Pane for button
		HBox btPane = new HBox();
		btPane.setAlignment(Pos.CENTER);
		btPane.setPadding(new Insets(10, 0, 0, 0));
		
		// Create Button Start
		Button btStart = new Button("Start");
		btPane.getChildren().add(btStart);
		
		borderPane.setCenter(pane);
		borderPane.setBottom(btPane);
		BorderPane.setAlignment(pane, Pos.CENTER);
		
		// Create lattice and place it to the pane
		int arLattice = 16;
		int step = 20;
		
		// paint grid lines
		for (int i = 0; i < arLattice+1; i++) {
			Line horLine = new Line(0, step * i,
			    step * arLattice, step * i);
			horLine.setStrokeWidth(0.3);
			pane.getChildren().add(horLine);
			
			Line vertLine = new Line(step * i, 0,
			    step * i, step * arLattice);
			vertLine.setStrokeWidth(0.3);
			pane.getChildren().add(vertLine);
		}
		
		// Create event on btStart
		btStart.setOnAction(e -> walk(pane, step));

		// Create a scene and place it in the stage
		Scene scene = new Scene(borderPane);
		primaryStage.setTitle("Upr1534");
		primaryStage.setScene(scene);
		primaryStage.show();
	}
	
	public void walk(Pane pane, int step) {
		int x1 = 29 * step;
		int y1 = 29 * step;
		int x2 = 29 * step;
		int y2 = 29 * step;
		ArrayList<Integer> x = new ArrayList<>();
		ArrayList<Integer> y = new ArrayList<>();
		
		int random = (int)(Math.random() * 4);;
		while (x2 >= 0 && y2 >= 0 && x2 <= 3000 && y2 <= 3000) {
			random = (int)(Math.random() * 4);
			
			//up
			if (random == 0) {
				
				if (y.contains(y2 - step)) {continue;}
				
				y2 -= step;
				y.add(y2);
			    
				Line pathLine = new Line(x1, y1, x2, y2);
				pathLine.setStrokeWidth(3);
				pane.getChildren().add(pathLine);
				x1 = x2;
				y1 = y2;
				
				random = (int)(Math.random() * 4);
				while (random == 2) {
				    random = (int)(Math.random() * 4);
				}
			}
			//right
			else if (random == 1) {
				if (x.contains(x2 + step)) {continue;}
				
				x2 += step;
				x.add(x2);
				
			    Line pathLine = new Line(x1, y1, x2, y2);
			    pathLine.setStrokeWidth(3);
			    pane.getChildren().add(pathLine);
			    x1 = x2;
				y1 = y2;
				
				x.add(x2);
				
				random = (int)(Math.random() * 4);
				while (random == 3) {
				    random = (int)(Math.random() * 4);
				}
			}
			// down
			else if (random == 2) {
				if (y.contains(y2 + step)) {continue;}
				
				y2 += step;
				y.add(y2);
				
			    Line pathLine = new Line(x1, y1, x2, y2);
			    pathLine.setStrokeWidth(3);
			    pane.getChildren().add(pathLine);
			    x1 = x2;
				y1 = y2;
				
				y.add(y2);
				
				random = (int)(Math.random() * 4);
				while (random == 0) {
				    random = (int)(Math.random() * 4);
				}
			}
			// left
			else if (random == 3) {
				if (x.contains(x2 - step)) {continue;}
				
				x2 -= step;
				x.add(x2);
				
			    Line pathLine = new Line(x1, y1, x2, y2);
			    pathLine.setStrokeWidth(3);
			    pane.getChildren().add(pathLine);
			    x1 = x2;
				y1 = y2;
				
				x.add(x2);
				
				random = (int)(Math.random() * 4);
				while (random == 1) {
				    random = (int)(Math.random() * 4);
				}
			}
			else break;
			
			
		}
		
		System.out.println((int)(Math.random() * 4));
		
	}
	
	public static void main(String[] args) {
		Application.launch(args);
	}
}
